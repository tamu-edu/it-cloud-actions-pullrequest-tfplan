name: 'Terraform Plan to Pull Request'
description: 'This workflow will generate and post a terraform plan to a pull request.'
inputs:
  debug:
    description: Debug workflow with tmate if an error occurs
    required: false
    default: "false"
  GITHUB_TOKEN:
    description: GitHub token for access to the pull request
    required: true
  working-directory:
    description: Working directory for the `run` actions
    required: false
    default: ''
  terraform-version:
    description: Version of terraform to install
    required: false
    default: latest
  terraform-workspace:
    description: Terraform workspace to select. Must already exist
    required: false
    default: default
  terraform-init-flags:
    description: CLI flags to use with terraform init
    required: false
    default: ""
  terraform-plan-flags:
    description: CLI flags to use with terraform plan
    required: false
    default: ""


outputs:
  plan:
    description: 'The plan output'
    value: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
  artifact:
    description: 'The file name of the terraform plan artifact'
    value: "pr-${{ github.event.pull_request.number }}-tfplan"
runs:
  using: "composite"
  steps:
    - name: setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: install terraform-plan-summary
      shell: bash
      run: |
        REPO="dineshba/terraform-plan-summary"
        curl -LO https://github.com/$REPO/releases/latest/download/tf-summarize_linux_amd64.tar.gz
        tmpDir=$(mktemp -d -t tmp.XXXXXXXXXX)
        mv tf-summarize_linux_amd64.tar.gz $tmpDir
        cd $tmpDir
        tar -xzf tf-summarize_linux_amd64.tar.gz
        chmod +x tf-summarize
        echo $PWD >> $GITHUB_PATH

    - name: Terraform Init
      id: init
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform init ${{ inputs.terraform-init-flags }}

    - name: Post Init
      if: ${{ github.event_name == 'pull_request' }}
      uses: tamu-edu/it-ae-actions-terraform-pr-commenter@dev
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        TF_WORKSPACE: ${{ inputs.terraform-workspace }}

    - name: Terraform Plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        TF_WORKSPACE: ${{ inputs.terraform-workspace }}
        TF_IN_AUTOMATION: "true"
      run: "terraform plan -out=tfplan -input=false ${{ inputs.terraform-plan-flags }} |& tee tf_plan.txt"
      continue-on-error: true

    - name: generate tf-summarize table
      id: summary
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        TF_WORKSPACE: ${{ inputs.terraform-workspace }}
      run: |
        EOF=$(openssl rand -hex 8)

        echo "table<<$EOF" >> $GITHUB_OUTPUT
        terraform-bin show -json tfplan | tf-summarize -md >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT

    - name: Check for tfplan file
      shell: bash
      if: steps.plan.outputs.exitcode == 0
      run: cat ${{ github.workspace }}/${{ inputs.working-directory }}/tf_plan.txt

    - name: Post terraform plan
      if: ${{ github.event_name == 'pull_request' }}
      uses: tamu-edu/it-cloud-actions-terraform-pr-commenter@account-hub
      with:
        commenter_type: plan
        terraform_version: ${{ inputs.terraform-version }}
        commenter_plan_path: ${{ github.workspace }}/${{ inputs.working-directory }}/tf_plan.txt
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
        comment_prepend: ${{ steps.summary.outputs.table }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        TF_WORKSPACE: ${{ inputs.terraform-workspace }}

    - name: Save Artifact
      id: save-artifact
      uses: actions/upload-artifact@v3
      with:
        name: pr-${{ github.event.pull_request.number }}-tfplan
        path: ${{ github.workspace }}/${{ inputs.working-directory }}/tfplan
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: Debug with TMATE if the debug environment variable is set to "true" and something failed
      if: ${{ (failure() || steps.plan.outcome == 'failure') && inputs.debug == 'true' }}
      uses: mxschmitt/action-tmate@v3

    - name: Workflow Run Status
      shell: bash
      if: steps.plan.outcome == 'failure'
      run: exit 1
